#!/bin/bash

# set the working directory to the root of the project
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )"
VENDOR_DIR="$DIR/vendor"
SHARDS_CACHE_PATH="$VENDOR_DIR/.cache/shards"
SHARDS_INSTALL_PATH="$VENDOR_DIR/shards/install"
SHARDS_CACHED="$VENDOR_DIR/shards/cache"

file="vendor/shards/install/lib/.shards.info"

if ! [ -x "$(command -v yq)" ]; then
  echo -e "❌ ${RED}Error${OFF}: yq is not installed"
  echo "Please install yq -> https://github.com/mikefarah/yq"
  exit 1
fi

TRASHDIR=$(mktemp -d /tmp/bootstrap.XXXXXXXXXXXXXXXXX)
cleanup() {
  rm -rf "$TRASHDIR"
}
trap cleanup EXIT

# Use yq to parse the file and extract shard names and versions
shards=$(yq eval '.shards | to_entries | .[] | "\(.key)-\(.value.version)"' $file)

# Loop over each shard
echo "$shards" | while IFS= read -r shard; do
  # Extract name and version
  name=$(echo $shard | cut -d'-' -f1)
  version=$(echo $shard | cut -d'-' -f2)

  mkdir -p "$TRASHDIR/$name-$version.shard"
  mkdir -p "$TRASHDIR/$name-$version.shard/shard"
  mkdir -p "$TRASHDIR/$name-$version.shard/cache"
  cp -r "$SHARDS_INSTALL_PATH/lib/$name/"* "$TRASHDIR/$name-$version.shard/shard" 2>/dev/null || true
  cp -r "$SHARDS_CACHE_PATH/github.com/$name"* "$TRASHDIR/$name-$version.shard/cache" 2>/dev/null || true

  # zip the shard
  zip -q -r "$TRASHDIR/$name-$version.zip" "$TRASHDIR/$name-$version.shard" 2>/dev/null || true

  # move the zip to the cache
  mkdir -p "$SHARDS_CACHED"
  mv "$TRASHDIR/$name-$version.zip" "$SHARDS_CACHED/$name-$version.shard"
  
  echo "cached $name $version"
done
